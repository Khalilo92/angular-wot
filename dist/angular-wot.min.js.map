{"version":3,"sources":["wot.module.js","td-parser.service.js","thing-client.service.js"],"names":["wot","angular","module","factory","$http","CoAP","TdParser","numericTypes","isNumericType","xsdType","indexOf","createThing","parsedTd","newThing","name","metadata","properties","actions","uri","protocols","HTTP","interactions","filter","interaction","forEach","property","push","writable","outputData","autoUpdate","history","parent","isNumeric","this","action","xsdParamType","inputData","xsdReturnType","fromUrl","url","substring","get","then","res","JSON","parse","data","parseJson","json","td","ThingClient","readProperty","thing","applyNewValue","value","length","shift","writeProperty","put","callAction","param","payload","post"],"mappings":"AAAA,GAAAA,KAAAC,QAAAC,OAAA,OAAA,QCAAD,SAAAC,OAAA,OAAAC,QAAA,YAAA,QAAA,OACA,SAAAC,EAAAC,GACA,GAAAC,MAEAC,GACA,WACA,YACA,cACA,UACA,WACA,mBACA,oBAuEA,OApEAD,GAAAE,cAAA,SAAAC,GACA,MAAA,IAAAF,EAAAG,QAAAD,IAGAH,EAAAK,YAAA,SAAAC,GACA,GAAAC,IACAC,KAAAF,EAAAG,SAAAD,KACAE,cACAC,WACAC,IAAAN,EAAAG,SAAAI,UAAA,KAAAP,EAAAG,SAAAI,UAAAC,KAAAF,IAAAN,EAAAG,SAAAI,UAAAd,KAAAa,IACAC,UAAAP,EAAAG,SAAAI,UAoCA,OAhCAP,GAAAS,aACAC,OAAA,SAAAC,GACA,MAAA,YAAAA,EAAA,WAEAC,QAAA,SAAAC,GACAZ,EAAAG,WAAAU,MACAZ,KAAAW,EAAAX,KACAa,SAAAF,EAAAE,SACAlB,QAAAgB,EAAAG,WACAC,YAAA,EACAC,WACAC,OAAAlB,EACAmB,UAAA,WACA,MAAAxB,eAAAyB,KAAAxB,cAMAG,EAAAS,aACAC,OAAA,SAAAC,GACA,MAAA,UAAAA,EAAA,WAEAC,QAAA,SAAAU,GACArB,EAAAI,QAAAS,MACAZ,KAAAoB,EAAApB,KACAqB,aAAAD,EAAAE,UACAC,cAAAH,EAAAN,WACAG,OAAAlB,MAIAA,GAGAP,EAAAgC,QAAA,SAAAC,GACA,MAAA,QAAAA,EAAAC,UAAA,EAAA,GACAnC,EAAAoC,IAAAF,GACAG,KAAA,SAAAC,GACA,MAAAC,MAAAC,MAAAF,KAEAD,KAAApC,EAAAK,aAEAP,EAAAqC,IAAAF,GAAAG,KAAA,SAAAC,GACA,MAAAA,GAAAG,OACAJ,KAAApC,EAAAK,cAGAL,EAAAyC,UAAA,SAAAC,GAEA,GAAAC,GAAAL,KAAAC,MAAAG,EACA,OAAA1C,GAAAK,YAAAsC,IAGA3C,KClFAL,QAAAC,OAAA,OAAAC,QAAA,eAAA,QAAA,OACA,SAAAC,EAAAC,GACA,GAAA6C,KA+CA,OA3CAA,GAAAC,aAAA,SAAAC,EAAA3B,GACA,QAAA4B,GAAAC,GAKA,IAJA7B,EAAA6B,MAAAA,EACA7B,EAAAK,QAAAJ,KAAA4B,GAGA7B,EAAAK,QAAAyB,QAAA,IAAA9B,EAAAK,QAAA0B,QAGA,MAAAJ,GAAAjC,UAAA,KACAf,EAAAqC,IAAAW,EAAAjC,UAAA,KAAAD,IAAA,IAAAO,EAAAX,MACA4B,KAAA,SAAAC,GAAA,MAAAA,GAAAG,KAAAQ,QACAZ,KAAAW,GACAD,EAAAjC,UAAA,KACAd,EAAAoC,IAAAW,EAAAjC,UAAA,KAAAD,IAAA,IAAAO,EAAAX,MACA4B,KAAA,SAAAC,GACA,MAAAC,MAAAC,MAAAF,GAAAW,QAEAZ,KAAAW,GALA,QASAH,EAAAO,cAAA,SAAAL,EAAA3B,GACA,MAAA2B,GAAAjC,UAAA,KACAf,EAAAsD,IAAAN,EAAAjC,UAAA,KAAAD,IAAA,IAAAO,EAAAX,MAAAwC,MAAA7B,EAAA6B,QAEAjD,EAAAqD,IAAAN,EAAAjC,UAAA,KAAAD,IAAA,IAAAO,EAAAX,MAAAwC,MAAA7B,EAAA6B,SAIAJ,EAAAS,WAAA,SAAAP,EAAAlB,EAAA0B,GACA,GAAAC,IAAAP,MAAAM,EAKA,OAJA,cAAA1B,EAAAC,eACA0B,EAAAD,GAGAR,EAAAjC,UAAA,KACAf,EAAA0D,KAAAV,EAAAjC,UAAA,KAAAD,IAAA,IAAAgB,EAAApB,KAAA+C,GAEAxD,EAAAyD,KAAAV,EAAAjC,UAAA,KAAAD,IAAA,IAAAgB,EAAApB,KAAA+C,IAIAX","file":"angular-wot.min.js","sourcesContent":["var wot = angular.module(\"wot\",['coap']);\r\n","angular.module(\"wot\").factory('TdParser', ['$http', 'CoAP',\r\n    function TdParserFactory($http, CoAP) {\r\n        var TdParser = {};\r\n\r\n        var numericTypes = [\r\n            'xsd:byte',\r\n            'xsd:float',\r\n            'xsd:decimal',\r\n            'xsd:int',\r\n            'xsd:long',\r\n            'xsd:unsignedByte',\r\n            'xsd:unsignedShort'\r\n        ];\r\n\r\n        TdParser.isNumericType = function isNumericType(xsdType) {\r\n            return numericTypes.indexOf(xsdType) != -1;\r\n        }\r\n\r\n        TdParser.createThing = function createThing(parsedTd) {\r\n            var newThing = {\r\n                'name': parsedTd.metadata.name,\r\n                'properties': [],\r\n                'actions': [],\r\n                'uri': (parsedTd.metadata.protocols.HTTP) ? parsedTd.metadata.protocols.HTTP.uri : parsedTd.metadata.protocols.CoAP.uri, //FIXME dodgy\r\n                'protocols': parsedTd.metadata.protocols\r\n            };\r\n\r\n            //add all properties\r\n            parsedTd.interactions\r\n                .filter(function isProperty(interaction) {\r\n                    return interaction[\"@type\"] == \"Property\";\r\n                })\r\n                .forEach(function addProperty(property) {\r\n                    newThing.properties.push({\r\n                        'name': property.name,\r\n                        'writable': property.writable,\r\n                        'xsdType': property.outputData,\r\n                        'autoUpdate': false,\r\n                        'history': [],\r\n                        'parent': newThing,\r\n                        'isNumeric': function isNumeric() {\r\n                            return isNumericType(this.xsdType);\r\n                        }\r\n                    });\r\n                });\r\n\r\n            //add actions\r\n            parsedTd.interactions\r\n                .filter(function isAction(interaction) {\r\n                    return interaction[\"@type\"] == \"Action\";\r\n                })\r\n                .forEach(function addAction(action) {\r\n                    newThing.actions.push({\r\n                        'name': action.name,\r\n                        'xsdParamType': action.inputData,\r\n                        'xsdReturnType': action.outputData,\r\n                        'parent': newThing\r\n                    });\r\n                });\r\n\r\n            return newThing;\r\n        }\r\n\r\n        TdParser.fromUrl = function fromUrl(url) {\r\n            if (url.substring(0, 4) == 'coap') {\r\n                return CoAP.get(url)\r\n                    .then(function(res) {\r\n                        return JSON.parse(res)\r\n                    })\r\n                    .then(TdParser.createThing)\r\n            } else\r\n                return $http.get(url).then(function(res) {\r\n                    return res.data\r\n                }).then(TdParser.createThing)\r\n        }\r\n\r\n        TdParser.parseJson = function parseJson(json) {\r\n            // TODO actually parse as JSON-LD, e.g. using io-informatics/angular-jsonld\r\n            var td = JSON.parse(json);\r\n            return TdParser.createThing(td);\r\n        }\r\n\r\n        return TdParser;\r\n    }\r\n]);\r\n","angular.module(\"wot\").factory('ThingClient',['$http','CoAP',\r\n  function ThingClientFactory($http,CoAP) {\r\n    var ThingClient = {};\r\n\r\n\r\n\r\n    ThingClient.readProperty = function readProperty(thing,property) {\r\n      function applyNewValue(value) {\r\n        property.value = value;\r\n        property.history.push(value);\r\n\r\n        //ensure size\r\n        while(property.history.length >= 20) property.history.shift();\r\n      }\r\n\r\n      if(thing.protocols['HTTP']) {\r\n        return $http.get(thing.protocols['HTTP'].uri + \"/\" + property.name)\r\n         .then(function(res) {return res.data.value})\r\n         .then(applyNewValue);\r\n     } else if(thing.protocols['CoAP']) {\r\n       return CoAP.get(thing.protocols['CoAP'].uri + \"/\" + property.name)\r\n        .then(function(res) {\r\n          return JSON.parse(res).value\r\n          })\r\n        .then(applyNewValue);\r\n     }\r\n    }\r\n\r\n    ThingClient.writeProperty = function writeProperty(thing,property) {\r\n      if(thing.protocols['HTTP']) {\r\n        return $http.put(thing.protocols['HTTP'].uri + \"/\" + property.name, {\"value\" : property.value})\r\n      } else {\r\n        return CoAP.put(thing.protocols['CoAP'].uri + \"/\" + property.name, {\"value\" : property.value})\r\n      }\r\n    }\r\n\r\n    ThingClient.callAction = function callAction(thing,action,param) {\r\n      var payload = {\"value\" : param};\r\n      if(action.xsdParamType === 'WoTScript') {\r\n        payload = param;\r\n      };\r\n\r\n      if(thing.protocols['HTTP']) {\r\n        return $http.post(thing.protocols['HTTP'].uri + \"/\" + action.name, payload);\r\n      } else {\r\n        return CoAP.post(thing.protocols['CoAP'].uri + \"/\" + action.name, payload);\r\n      }\r\n    }\r\n\r\n    return ThingClient;\r\n  }\r\n]);\r\n"],"sourceRoot":"/source/"}