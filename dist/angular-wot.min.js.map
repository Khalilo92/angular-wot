{"version":3,"sources":["wot.module.js","td-parser.service.js","thing-client.service.js"],"names":["wot","angular","module","factory","$http","CoAP","TdParser","numericTypes","isNumericType","xsdType","indexOf","createThingfromOldTd","parsedTd","newThing","name","metadata","properties","actions","uri","protocols","HTTP","interactions","filter","interaction","forEach","property","push","writable","outputData","autoUpdate","history","parent","isNumeric","this","action","xsdParamType","inputData","xsdReturnType","chooseUriIndex","uriArray","prefIdx","i","length","scheme","substring","pathConcat","left","right","slice","createThingfromNewTd","uris","Array","uriIndex","Error","valueType","hrefs","paramType","numericParamType","createThing","tdObj","fromUrl","url","get","then","res","JSON","parse","data","parseJson","json","td","ThingClient","restcall","method","payload","req","doCoapReq","defaults","transformResponse","readProperty","thing","applyNewValue","value","shift","writeProperty","put","callAction","param","post"],"mappings":"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","file":"angular-wot.min.js","sourcesContent":["var wot = angular.module(\"wot\",['coap']);\r\n","angular.module(\"wot\").factory('TdParser', ['$http', 'CoAP',\r\n    function TdParserFactory($http, CoAP) {\r\n        var TdParser = {};\r\n\r\n        var numericTypes = [\r\n            'xsd:byte',\r\n            'xsd:float',\r\n            'xsd:decimal',\r\n            'xsd:int',\r\n            'xsd:long',\r\n            'xsd:unsignedByte',\r\n            'xsd:unsignedShort'\r\n        ];\r\n\r\n        TdParser.isNumericType = function isNumericType(xsdType) {\r\n            return numericTypes.indexOf(xsdType) != -1;\r\n        }\r\n        \r\n        var createThingfromOldTd =  function createThingfromOldTd(parsedTd) {\r\n            var newThing = {\r\n                'name': parsedTd.metadata.name,\r\n                'properties': [],\r\n                'actions': [],\r\n                'uri': (parsedTd.metadata.protocols.HTTP) ? parsedTd.metadata.protocols.HTTP.uri : parsedTd.metadata.protocols.CoAP.uri, //FIXME dodgy\r\n                'protocols': parsedTd.metadata.protocols\r\n            };\r\n\r\n            //add all properties\r\n            parsedTd.interactions\r\n                .filter(function isProperty(interaction) {\r\n                    return interaction[\"@type\"] == \"Property\";\r\n                })\r\n                .forEach(function addProperty(property) {\r\n                    newThing.properties.push({\r\n                        'name': property.name,\r\n                        'writable': property.writable,\r\n                        'xsdType': property.outputData,\r\n                        'autoUpdate': false,\r\n                        'history': [],\r\n                        'parent': newThing,\r\n                        'isNumeric': isNumericType(this.xsdType)\r\n                    });\r\n                });\r\n\r\n            //add actions\r\n            parsedTd.interactions\r\n                .filter(function isAction(interaction) {\r\n                    return interaction[\"@type\"] == \"Action\";\r\n                })\r\n                .forEach(function addAction(action) {\r\n                    newThing.actions.push({\r\n                        'name': action.name,\r\n                        'xsdParamType': action.inputData,\r\n                        'xsdReturnType': action.outputData,\r\n                        'parent': newThing\r\n                    });\r\n                });\r\n\r\n            return newThing;\r\n        }\r\n\r\n        var chooseUriIndex = function chooseUriIndex(uriArray) {\r\n            prefIdx = -1;\r\n            for(i=0;i<uriArray.length;i++) {\r\n                var uri = uriArray[i];\r\n                var scheme = uri.substring(0,uri.indexOf(':'));\r\n                if(scheme === 'http')\r\n                    return i;\r\n                else if (scheme === 'coap')\r\n                    prefIdx = i;\r\n            };\r\n            return prefIdx;\r\n            \r\n        }\r\n\r\n        var pathConcat = function pathConcat(left, right) {\r\n            if(left.slice(-1) === '/') {\r\n               return left + right; \r\n            } else {\r\n                return left + '/' + right;\r\n            }\r\n        }\r\n\r\n        var createThingfromNewTd =  function createThingfromNewTd(parsedTd) {\r\n            var uriArray = ( parsedTd.uris instanceof Array ) ? parsedTd.uris : [parsedTd.uris];\r\n            var uriIndex = chooseUriIndex(uriArray);\r\n            if(uriIndex === -1) throw Error(\"no suitable Protocols found\")\r\n            var newThing = {\r\n                'name': parsedTd.name,\r\n                'properties': [],\r\n                'actions': [],\r\n                'uri': uriArray[uriIndex]\r\n            };\r\n\r\n            //add all properties\r\n            if(parsedTd.properties) parsedTd.properties\r\n                .forEach(function addProperty(property) {\r\n                    newThing.properties.push({\r\n                        'name': property.name,\r\n                        'writable': property.writable,\r\n                        'xsdType': property.valueType,\r\n                        'uri': pathConcat(newThing.uri,property.hrefs[uriIndex]),\r\n                        'autoUpdate': false,\r\n                        'history': [],\r\n                        'parent': newThing,\r\n                        'isNumeric': TdParser.isNumericType(this.xsdType)\r\n                    });\r\n                });\r\n\r\n            //add actions\r\n            if(parsedTd.actions) parsedTd.actions\r\n                .forEach(function addAction(action) {\r\n                    var paramType = (action.inputData) ? action.inputData.valueType :\"\";\r\n                    \r\n                    newThing.actions.push({\r\n                        'name': action.name,\r\n                        'xsdParamType': paramType,\r\n                        'numericParamType': TdParser.isNumericType(paramType), //TODO objects for types\r\n                        'xsdReturnType': (action.outputData)? action.outputData.valueType : \"\",\r\n                        'parent': newThing,\r\n                        'uri' : pathConcat(newThing.uri,action.hrefs[uriIndex])\r\n                    });\r\n                });\r\n\r\n            return newThing;\r\n        }\r\n\r\n       TdParser.createThing = function dualParseTD(tdObj){\r\n            if(tdObj.metadata)\r\n                return createThingfromOldTd(tdObj);\r\n               else\r\n                return createThingfromNewTd(tdObj);\r\n        }\r\n\r\n        TdParser.fromUrl = function fromUrl(url) {\r\n            if (url.substring(0, 4) == 'coap') {\r\n                return CoAP.get(url)\r\n                    .then(function(res) {\r\n                        return JSON.parse(res)\r\n                    })\r\n                    .then(TdParser.createThing)\r\n            } else\r\n                return $http.get(url).then(function(res) {\r\n                    return res.data\r\n                }).then(TdParser.createThing)\r\n        }\r\n\r\n        TdParser.parseJson = function parseJson(json) {\r\n            // TODO actually parse as JSON-LD, e.g. using io-informatics/angular-jsonld\r\n            var td = JSON.parse(json);\r\n            return TdParser.createThing(td);\r\n        }\r\n\r\n        return TdParser;\r\n    }\r\n]);\r\n","angular.module(\"wot\").factory('ThingClient', ['$http', 'CoAP',\r\n    function ThingClientFactory($http, CoAP) {\r\n        var ThingClient = {};\r\n\r\n        var restcall = function restcall(method, uri, payload) {\r\n            var scheme = uri.substring(0, uri.indexOf(':'));\r\n            if (scheme === 'http') {\r\n                var req = {\r\n                    'method': method,\r\n                    'url': uri,\r\n                    'data': payload\r\n                };\r\n                return $http(req);\r\n            } else if (scheme === 'coap') {\r\n                return CoAP.doCoapReq(method, uri, payload)\r\n                    .then($http.defaults.transformResponse);\r\n            } else\r\n                throw Error('unknown uri scheme')\r\n        }\r\n\r\n        ThingClient.readProperty = function readProperty(thing, property) {\r\n            function applyNewValue(value) {\r\n                property.value = value;\r\n                property.history.push(value);\r\n\r\n                //ensure size\r\n                while (property.history.length >= 20) property.history.shift();\r\n            }\r\n\r\n            if (property.uri) {\r\n                return restcall('GET', property.uri)\r\n                    .then(function(res) { return res.data.value })\r\n                    .then(applyNewValue);\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.get(thing.protocols['HTTP'].uri + \"/\" + property.name)\r\n                    .then(function(res) { return res.data.value })\r\n                    .then(applyNewValue);\r\n            } else if (thing.protocols['CoAP']) {\r\n                return CoAP.get(thing.protocols['CoAP'].uri + \"/\" + property.name)\r\n                    .then(function(res) {\r\n                        return JSON.parse(res).value\r\n                    })\r\n                    .then(applyNewValue);\r\n            }\r\n        }\r\n\r\n        ThingClient.writeProperty = function writeProperty(thing, property) {\r\n            if (property.uri) {\r\n                return restcall('PUT', property.uri, { \"value\": property.value })\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.put(thing.protocols['HTTP'].uri + \"/\" + property.name, { \"value\": property.value })\r\n            } else {\r\n                return CoAP.put(thing.protocols['CoAP'].uri + \"/\" + property.name, { \"value\": property.value })\r\n            }\r\n        }\r\n\r\n        ThingClient.callAction = function callAction(thing, action, param) {\r\n            var payload = { \"value\": param };\r\n            if (action.xsdParamType === 'WoTScript') {\r\n                payload = param;\r\n            };\r\n\r\n            if (action.uri) {\r\n                return restcall('POST', action.uri, payload)\r\n            }\r\n\r\n            if (thing.protocols['HTTP']) {\r\n                return $http.post(thing.protocols['HTTP'].uri + \"/\" + action.name, payload);\r\n            } else {\r\n                return CoAP.post(thing.protocols['CoAP'].uri + \"/\" + action.name, payload);\r\n            }\r\n        }\r\n\r\n        return ThingClient;\r\n    }\r\n]);\r\n"],"sourceRoot":"/source/"}